{"version":3,"sources":["App.module.css","redux/actions.js","App.js","serviceWorker.js","index.js","redux/reducer/counter.js"],"names":["module","exports","actions","connect","state","count","dispatch","increment","type","decrement","props","Container","maxWidth","className","classes","container","style","button","Button","variant","color","onClick","Boolean","window","location","hostname","match","store","createStore","action","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sHACAA,EAAOC,QAAU,CAAC,UAAY,uBAAuB,MAAQ,mBAAmB,OAAS,sB,qLCD5EC,EACA,YADAA,EAEA,YC8Bb,IAaeC,eAbS,SAACC,GACvB,MAAO,CACLC,MAAOD,MAIgB,SAACE,GAC1B,MAAO,CACLC,UAAW,kBAAMD,EAAS,CAAEE,KAAMN,KAClCO,UAAW,kBAAMH,EAAS,CAAEE,KAAMN,QAIvBC,EAtCf,SAAaO,GAWX,OACE,kBAACC,EAAA,EAAD,CAAWC,SAAS,KAAKC,UAAWC,IAAQC,WAC1C,yBAAKF,UAAWC,IAAQT,OACtB,wBAAIW,MAAO,CAAE,eAAkB,cAA/B,wBADF,WAEWN,EAAML,OAEjB,yBAAKQ,UAAWC,IAAQG,QACtB,kBAACC,EAAA,EAAD,CAAQC,QAAQ,YAAYC,MAAM,YAAYC,QAASX,EAAMD,WAA7D,YACA,kBAACS,EAAA,EAAD,CAAQC,QAAQ,YAAYC,MAAM,UAAUC,QAASX,EAAMH,WAA3D,YCdYe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCTAC,EAAQC,aCRS,WAAwB,IAAvBxB,EAAsB,uDAAd,EAAGyB,EAAW,uCAC5C,OAAOA,EAAOrB,MACX,KAAKN,EACH,OAAeE,EAAQ,EAEzB,KAAKF,EACH,OAAeE,EAAO,EACxB,QACE,OAAOA,MDGd0B,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUL,MAAOA,GACf,kBAAC,EAAD,QAGJM,SAASC,eAAe,SDiHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b513874f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\",\"count\":\"App_count__2PmCJ\",\"button\":\"App_button__13pio\"};","export const actions = {\n  INCREMENT: \"INCREMENT\",\n  DECREMENT: \"DECREMENT\"\n}","import React from 'react';\nimport classes from './App.module.css';\nimport { Button, Container, Grid } from '@material-ui/core';\nimport { connect } from \"react-redux\";\nimport { actions } from './redux/actions'\n\n\nfunction App(props) {\n  // const [count, setCount] = useState(0);\n\n  // const handleSub = () => {\n  //   setCount((prevState) => (prevState - 1))\n  // }\n\n  // const handleAdd = () => {\n  //   setCount((prevState) => (prevState + 1))\n  // }\n\n  return (\n    <Container maxWidth=\"xs\" className={classes.container}>\n      <div className={classes.count}>\n        <h4 style={{ \"textDecoration\": \"underline\" }}>Redux Implementation</h4>\n        Count : {props.count}\n      </div>\n      <div className={classes.button}>\n        <Button variant=\"contained\" color=\"secondary\" onClick={props.decrement}>Subtract</Button>\n        <Button variant=\"contained\" color=\"primary\" onClick={props.increment} >Add</Button>\n      </div>\n    </Container>\n  )\n\n}\nconst mapStateToProps = (state) => {\n  return {\n    count: state\n  };\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    increment: () => dispatch({ type: actions.INCREMENT }),\n    decrement: () => dispatch({ type: actions.DECREMENT })\n  };\n\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux'\nimport { createStore } from 'redux'\nimport {counter } from './redux/reducer/counter'\n\nconst store = createStore(counter);\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import {actions} from '../actions'\nexport const counter = (state = 0, action) => {\n  switch(action.type) {\n     case actions.INCREMENT:\n       return state = state + 1;\n   \n     case actions.DECREMENT :\n       return state = state -1;\n     default:\n       return state;\n   }\n};"],"sourceRoot":""}